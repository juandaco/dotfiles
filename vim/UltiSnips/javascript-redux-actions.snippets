global !p

import re
first_cap_re = re.compile('(.)([A-Z][a-z]+)')
all_cap_re = re.compile('([a-z0-9])([A-Z])')

def toConstant(str):
	s1 = first_cap_re.sub(r'\1_\2', str)
	return all_cap_re.sub(r'\1_\2', s1).upper()

def toCamelCase(str):
	x = str.title().replace('_', '')
	return x[:1].lower() + x[1:]

def argsToVals(str):
	args = str.replace('(', '').replace(')', '').replace(' ', '').split(',')
	spread = ''.join(['  ' + x + ',\n' for x in args ])
	return '' if args[0] == '' else '\n' + spread[:-1]

endglobal

snippet nsat "Namespaced Action Types" b
const ${1:moduleName}Actions = {
	${2:SOME_ACTION}: '$2',
};

Object.keys($1Actions).forEach(action => {
	$1Actions[action] = \`@$1/\${action}\`;
});

export default $1Actions;

endsnippet

snippet at "Action Type" b
export const ${1:SOME_ACTION} = '$1';
endsnippet

snippet atp "Action Type Property" b
${1:SOME_ACTION}: '$1',
endsnippet

snippet ac "Action Creator" b
export const $1 = ($2) => ({
	type: types.`!p snip.rv=toConstant(t[1])`,`!p snip.rv=argsToVals(t[2])`
});
endsnippet


snippet agac "Async Get Action Creator" b
export const $1 = ($2) => async dispatch => {
	dispatch($1Request());

	try {
		const res = await fetch(\`/\$\{$2\}\`, {
			credentials: 'include',
			headers: {
				'content-type': 'application/json',
			},
		});

		if (res.status === 200) {
			const { $3 } = await res.json();
			return dispatch($1Success($3));
		}

		dispatch($1Failure());
	} catch(err) {
		dispatch($1Failure());
		console.log(err);
	}
};

endsnippet

