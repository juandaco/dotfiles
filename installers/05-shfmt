#!/usr/bin/env bash
#
# Installs or updates `shfmt`.

GIT_USER="mvdan"
GIT_REPO="sh"
HOME_BIN="$HOME/bin"

OS="$(uname -s)"

if [ "$OS" == "Darwin" ]; then
  # Verify that homebrew is installed
  if [ -z "$(command -v brew)" ]; then
    echo "You need to install homebrew." 1>&2
    exit 1
  fi

  # MacOS with brew installed
  command -v shfmt >>/dev/null || brew install shfmt

elif [ "$OS" == "Linux" ]; then
  # Linux

  # Install shfmt (from GitHub)
  SHFMT_PACKAGE_VERSION="$(curl --silent "https://api.github.com/repos/$GIT_USER/$GIT_REPO/releases/latest" | grep '"tag_name":' | awk '{print $2}' | tr -d '",')"

  if [ -z "$(command -v shfmt)" ] || [ "$(shfmt --version)" != "$SHFMT_PACKAGE_VERSION" ]; then
    pushd "$HOME_BIN" >>/dev/null || exit

    echo "Installing shfmt..."

    ARCHITECTURE="$(uname -m)"

    if [ "$ARCHITECTURE" == "armv7l" ]; then
      # Raspberry Pi 32bit
      SHFMT_PACKAGE_NAME="shfmt_${SHFMT_PACKAGE_VERSION}_linux_arm"
      wget --quiet --output-document=shfmt "https://github.com/$GIT_USER/$GIT_REPO/releases/download/$SHFMT_PACKAGE_VERSION/$SHFMT_PACKAGE_NAME"
      chmod u+x shfmt

    elif [ "$ARCHITECTURE" == "aarch64" ]; then
      # Raspberry Pi 64bit
      SHFMT_PACKAGE_NAME="shfmt_${SHFMT_PACKAGE_VERSION}_linux_arm64"
      wget --quiet --output-document=shfmt "https://github.com/$GIT_USER/$GIT_REPO/releases/download/$SHFMT_PACKAGE_VERSION/$SHFMT_PACKAGE_NAME"
      chmod u+x shfmt

    elif [ "$ARCHITECTURE" == "x86_64" ]; then
      # Linux 64bit
      if grep --quiet arch /etc/os-release; then
        # Arch
        sudo pacman --needed -S shfmt
      elif grep --quiet debian /etc/os-release; then
        # Debian
        SHFMT_PACKAGE_NAME="shfmt_${SHFMT_PACKAGE_VERSION}_linux_amd64"
        wget --quiet --output-document=shfmt "https://github.com/$GIT_USER/$GIT_REPO/releases/download/$SHFMT_PACKAGE_VERSION/$SHFMT_PACKAGE_NAME"
        chmod u+x shfmt
      fi

    else
      # Other Architecture
      echo "The architecture $ARCHITECTURE is not supported yet." 1>&2
      exit 1
    fi

    if [ -n "$(command -v shfmt)" ]; then
      echo "shfmt correctly installed."
    else
      echo "shfmt was not installed." 1>&2
    fi

    popd >>/dev/null || exit
  fi

else
  # Other OS
  echo "The OS $OS is not supported yet." 1>&2
  exit 1

fi
